// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger-labs/minbft/messages (interfaces: MessageWithUI,ReplicaMessage)

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessageWithUI is a mock of MessageWithUI interface
type MockMessageWithUI struct {
	ctrl     *gomock.Controller
	recorder *MockMessageWithUIMockRecorder
}

// MockMessageWithUIMockRecorder is the mock recorder for MockMessageWithUI
type MockMessageWithUIMockRecorder struct {
	mock *MockMessageWithUI
}

// NewMockMessageWithUI creates a new mock instance
func NewMockMessageWithUI(ctrl *gomock.Controller) *MockMessageWithUI {
	mock := &MockMessageWithUI{ctrl: ctrl}
	mock.recorder = &MockMessageWithUIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageWithUI) EXPECT() *MockMessageWithUIMockRecorder {
	return m.recorder
}

// AttachUI mocks base method
func (m *MockMessageWithUI) AttachUI(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AttachUI", arg0)
}

// AttachUI indicates an expected call of AttachUI
func (mr *MockMessageWithUIMockRecorder) AttachUI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachUI", reflect.TypeOf((*MockMessageWithUI)(nil).AttachUI), arg0)
}

// Payload mocks base method
func (m *MockMessageWithUI) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload
func (mr *MockMessageWithUIMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockMessageWithUI)(nil).Payload))
}

// ReplicaID mocks base method
func (m *MockMessageWithUI) ReplicaID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// ReplicaID indicates an expected call of ReplicaID
func (mr *MockMessageWithUIMockRecorder) ReplicaID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaID", reflect.TypeOf((*MockMessageWithUI)(nil).ReplicaID))
}

// UIBytes mocks base method
func (m *MockMessageWithUI) UIBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UIBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// UIBytes indicates an expected call of UIBytes
func (mr *MockMessageWithUIMockRecorder) UIBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UIBytes", reflect.TypeOf((*MockMessageWithUI)(nil).UIBytes))
}

// MockReplicaMessage is a mock of ReplicaMessage interface
type MockReplicaMessage struct {
	ctrl     *gomock.Controller
	recorder *MockReplicaMessageMockRecorder
}

// MockReplicaMessageMockRecorder is the mock recorder for MockReplicaMessage
type MockReplicaMessageMockRecorder struct {
	mock *MockReplicaMessage
}

// NewMockReplicaMessage creates a new mock instance
func NewMockReplicaMessage(ctrl *gomock.Controller) *MockReplicaMessage {
	mock := &MockReplicaMessage{ctrl: ctrl}
	mock.recorder = &MockReplicaMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReplicaMessage) EXPECT() *MockReplicaMessageMockRecorder {
	return m.recorder
}

// ReplicaID mocks base method
func (m *MockReplicaMessage) ReplicaID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// ReplicaID indicates an expected call of ReplicaID
func (mr *MockReplicaMessageMockRecorder) ReplicaID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaID", reflect.TypeOf((*MockReplicaMessage)(nil).ReplicaID))
}
