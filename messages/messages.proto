// Copyright (c) 2018 NEC Laboratories Europe GmbH.
//
// Authors: Wenting Li <wenting.li@neclab.eu>
//          Sergey Fedorov <sergey.fedorov@neclab.eu>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package messages;

message Message{
    oneof type {
        Request request = 1;
        Reply reply = 2;
        Prepare prepare = 3;
        Commit commit = 4;
    }
}

message Request {
    message M {
       uint32 client_id = 1; // c: client id
       uint64 seq = 2;       // seq: request sequence per client
       bytes payload = 3;    // op: operation payload
    }
    M msg = 1;               // request message
    bytes signature = 2;     // client signature over the request message
}

message Reply {
    message M {
        uint32 replica_id = 1;  // s: replica id
        uint32 client_id = 2;   // c: client id
        uint64 seq = 3;         // seq: corresponding request sequence
        bytes result = 4;       // res: result
    }
    M msg = 1;           // reply message
    bytes signature = 2; // replica's signature over the message
}

//---------------------------------------------------------------------
// Unifying all consensus messages that require a `msg` and `UI` field to
// format:
//
//  message Message {
//      M msg = 1;
//      bytes replica_ui = 2;
//  }
//
// and the message requires a `ReplicaID` field:
//
//  message M {
//      uint32 replica_id = 1;
//      .....
//  }
//---------------------------------------------------------------------


message Prepare {
    message M {
        uint64 view = 1;        // v: view
        uint32 replica_id = 2;  // s_i: replica id
        Request request = 3;    // m: request message
    }
    M msg = 1;
    bytes replica_ui = 2;       // UI_i: replica UI
}

message Commit {
    message M {
        uint64 view = 1;        // v: view
        uint32 replica_id = 2;  // s_j: replica id
        uint32 primary_id = 3;  // s_i: primary id
        Request request = 4;    // m: request message
        bytes primary_ui = 5;   // UI_i: primary UI
    }
    M msg = 1;
    bytes replica_ui = 2;       // UI_j: replica UI
}
