// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger-labs/minbft/core/internal/clientstate (interfaces: State)

// Package mock_clientstate is a generated GoMock package.
package mock_clientstate

import (
	gomock "github.com/golang/mock/gomock"
	messages "github.com/hyperledger-labs/minbft/messages"
	reflect "reflect"
)

// MockState is a mock of State interface
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddReply mocks base method
func (m *MockState) AddReply(arg0 *messages.Reply) error {
	ret := m.ctrl.Call(m, "AddReply", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReply indicates an expected call of AddReply
func (mr *MockStateMockRecorder) AddReply(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReply", reflect.TypeOf((*MockState)(nil).AddReply), arg0)
}

// CaptureRequestSeq mocks base method
func (m *MockState) CaptureRequestSeq(arg0 uint64) (bool, func()) {
	ret := m.ctrl.Call(m, "CaptureRequestSeq", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// CaptureRequestSeq indicates an expected call of CaptureRequestSeq
func (mr *MockStateMockRecorder) CaptureRequestSeq(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureRequestSeq", reflect.TypeOf((*MockState)(nil).CaptureRequestSeq), arg0)
}

// PrepareRequestSeq mocks base method
func (m *MockState) PrepareRequestSeq(arg0 uint64) (bool, error) {
	ret := m.ctrl.Call(m, "PrepareRequestSeq", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareRequestSeq indicates an expected call of PrepareRequestSeq
func (mr *MockStateMockRecorder) PrepareRequestSeq(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareRequestSeq", reflect.TypeOf((*MockState)(nil).PrepareRequestSeq), arg0)
}

// ReplyChannel mocks base method
func (m *MockState) ReplyChannel(arg0 uint64) <-chan *messages.Reply {
	ret := m.ctrl.Call(m, "ReplyChannel", arg0)
	ret0, _ := ret[0].(<-chan *messages.Reply)
	return ret0
}

// ReplyChannel indicates an expected call of ReplyChannel
func (mr *MockStateMockRecorder) ReplyChannel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyChannel", reflect.TypeOf((*MockState)(nil).ReplyChannel), arg0)
}

// RetireRequestSeq mocks base method
func (m *MockState) RetireRequestSeq(arg0 uint64) (bool, error) {
	ret := m.ctrl.Call(m, "RetireRequestSeq", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetireRequestSeq indicates an expected call of RetireRequestSeq
func (mr *MockStateMockRecorder) RetireRequestSeq(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetireRequestSeq", reflect.TypeOf((*MockState)(nil).RetireRequestSeq), arg0)
}
