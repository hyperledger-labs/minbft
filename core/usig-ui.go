// Copyright (c) 2018 NEC Laboratories Europe GmbH.
//
// Authors: Sergey Fedorov <sergey.fedorov@neclab.eu>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package minbft

import (
	"fmt"

	"github.com/nec-blockchain/minbft/api"
	"github.com/nec-blockchain/minbft/core/internal/peerstate"
	"github.com/nec-blockchain/minbft/messages"
	"github.com/nec-blockchain/minbft/usig"
)

// uiAcceptor accepts a valid USIG unique identifier.
//
// A UI is accepted if all previous UIs generated by that replica have
// been accepted and committed. If the UI cannot be accepted
// immediately, it will block until the UI can be accepted. The return
// value new indicates if the UI has not been accepted before. It is
// safe to invoke concurrently.
type uiAcceptor func(replicaID uint32, ui *usig.UI) (new bool)

// uiCommitter commits a USIG unique identifier.
//
// Each UI can only be committed once and has to be accepted before.
// After the UI is committed, the next UI can be accepted. It is safe
// to invoke concurrently.
type uiCommitter func(replicaID uint32, ui *usig.UI)

// uiVerifier verifies USIG certificate attached to a message.
//
// USIG certificate is verified and the UI is returned if it is valid
// for the message. A UI with zero counter value is never valid.
type uiVerifier func(msg messages.MessageWithUI) (ui *usig.UI, err error)

// uiAssigner assigns a unique identifier to a message.
//
// USIG UI is assigned and attached to the supplied message.
type uiAssigner func(msg messages.MessageWithUI)

// makeUIAcceptor constructs uiAcceptor using the supplied interface.
func makeUIAcceptor(providePeerState peerstate.Provider) uiAcceptor {
	return func(replicaID uint32, ui *usig.UI) (new bool) {
		return providePeerState(replicaID).AcceptUI(ui)
	}
}

// makeUICommitter constructs uiCommitter using the supplied interface.
func makeUICommitter(providePeerState peerstate.Provider) uiCommitter {
	return func(replicaID uint32, ui *usig.UI) {
		if err := providePeerState(replicaID).CommitUI(ui); err != nil {
			panic(err)
		}
	}
}

// makeUIVerifier constructs uiVerifier using the supplied external
// authenticator to verify USIG certificates.
func makeUIVerifier(authen api.Authenticator) uiVerifier {
	return func(msg messages.MessageWithUI) (*usig.UI, error) {
		ui := new(usig.UI)

		if err := ui.UnmarshalBinary(msg.UIBytes()); err != nil {
			return nil, fmt.Errorf("Failed unmarshaling UI: %s", err)
		} else if ui.Counter == uint64(0) {
			return nil, fmt.Errorf("Invalid (zero) counter value")
		}

		if err := authen.VerifyMessageAuthenTag(api.USIGAuthen, msg.ReplicaID(), msg.Payload(), msg.UIBytes()); err != nil {
			return nil, fmt.Errorf("Failed verifying USIG certificate: %s", err)
		}

		return ui, nil
	}
}

// makeUIAssigner constructs uiAssigner using the supplied external
// authentication interface to generate USIG UIs.
func makeUIAssigner(authen api.Authenticator) uiAssigner {
	return func(msg messages.MessageWithUI) {
		uiBytes, err := authen.GenerateMessageAuthenTag(api.USIGAuthen, msg.Payload())
		if err != nil {
			panic(err)
		}

		msg.AttachUI(uiBytes)
	}
}
