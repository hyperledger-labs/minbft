// Copyright (c) 2018 NEC Laboratories Europe GmbH.
//
// Authors: Sergey Fedorov <sergey.fedorov@neclab.eu>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package minbft

import (
	"fmt"
	"sync"

	"github.com/nec-blockchain/minbft/api"
	"github.com/nec-blockchain/minbft/messages"
	"github.com/nec-blockchain/minbft/usig"
)

// uiAcceptor verifies and accepts a unique identifier of a message.
//
// A UI is accepted if it is valid for the message and all previous
// UIs generated by the replica USIG instance have already been
// accepted. The UI is new if it has been accepted for the first time.
// This function is safe to invoke concurrently.
type uiAcceptor func(msg messages.MessageWithUI) (new bool, err error)

// uiVerifier verifies USIG certificate attached to a message.
//
// USIG certificate is verified and the UI is returned if it is valid
// for the message.
type uiVerifier func(msg messages.MessageWithUI) (ui *usig.UI, err error)

// uiAssigner assigns a unique identifier to a message.
//
// USIG UI is assigned and attached to the supplied message.
type uiAssigner func(msg messages.MessageWithUI)

// defaultUIAcceptor constructs a standard uiAcceptor using the
// supplied external authentication interface.
func defaultUIAcceptor(auth api.Authenticator) uiAcceptor {
	verifier := makeUIVerifier(auth)
	return makeUIAcceptor(verifier)
}

// makeUIAcceptor constructs uiAcceptor using the supplied UI
// verifier.
func makeUIAcceptor(verifier uiVerifier) uiAcceptor {
	var (
		lock   sync.Mutex
		lastCV = make(map[uint32]uint64) // replica ID -> last accepted CV
	)

	return func(msg messages.MessageWithUI) (new bool, err error) {
		ui, err := verifier(msg)
		if err != nil {
			return false, err
		} else if ui.Counter == uint64(0) {
			return false, fmt.Errorf("Invalid (zero) counter value")
		}

		replicaID := msg.ReplicaID()

		lock.Lock()
		defer lock.Unlock()

		if ui.Counter-1 > lastCV[replicaID] {
			return false, fmt.Errorf("Previous counter value not yet accepted")
		}

		if ui.Counter <= lastCV[replicaID] {
			return false, nil
		}

		lastCV[replicaID]++

		return true, nil
	}
}

// makeUIVerifier constructs uiVerifier using the supplied external
// authenticator to verify USIG certificates.
func makeUIVerifier(authen api.Authenticator) uiVerifier {
	return func(msg messages.MessageWithUI) (*usig.UI, error) {
		ui := new(usig.UI)

		if err := ui.UnmarshalBinary(msg.UIBytes()); err != nil {
			return nil, fmt.Errorf("Failed unmarshaling UI: %s", err)
		}

		if err := authen.VerifyMessageAuthenTag(api.USIGAuthen, msg.ReplicaID(), msg.Payload(), msg.UIBytes()); err != nil {
			return nil, fmt.Errorf("Failed verifying USIG certificate: %s", err)
		}

		return ui, nil
	}
}

// makeUIAssigner constructs uiAssigner using the supplied external
// authentication interface to generate USIG UIs.
func makeUIAssigner(authen api.Authenticator) uiAssigner {
	return func(msg messages.MessageWithUI) {
		uiBytes, err := authen.GenerateMessageAuthenTag(api.USIGAuthen, msg.Payload())
		if err != nil {
			panic(err)
		}

		msg.AttachUI(uiBytes)
	}
}
